---
- name: "Register username var"
  tags: always
  ansible.builtin.set_fact:
    username: "{{ ansible_user }}"

- name: "Check if User Exists: {{ ansible_user }}"
  when: ansible_connection !='local'
  vars:
    ansible_ssh_pass: "" # Clear password variables if they were supplied
    ansible_become_pass: ""
  block:
    - name: "Wait for Connection on User: {{ ansible_user }}"
      ansible.builtin.wait_for_connection:
        timeout: 20
        connect_timeout: 2
    - name: Disable Init
      ansible.builtin.set_fact:
        needs_init: false
  rescue:
    - name: Enable Init
      ansible.builtin.set_fact:
        needs_init: true

- name: Create New user (Local)
  when: ansible_connection =='local'
  vars:
    ansible_become_user: "{{ initial_user }}"
    ansible_ssh_private_key_file: "" # Disable Private key file if set, because we want to use password
  block:
    - name: Create new user
      ansible.builtin.include_tasks:
        file: createuser.yml

- name: Create New user (Remote)
  when: needs_init and ansible_connection !='local'
  vars:
    ansible_user: "{{ initial_user }}"
    ansible_ssh_private_key_file: "" # Disable Private key file if set, because we want to use password
  block:
    - name: Create new user
      ansible.builtin.include_tasks:
        file: createuser.yml

- name: Flush Handlers
  ansible.builtin.meta: flush_handlers

- name: Make sure further ssh connections dont use passwords
  tags: always
  ansible.builtin.set_fact:
    ansible_ssh_pass: ""
    ansible_become_pass: ""

- name: Reset ssh connection
  ansible.builtin.meta: reset_connection

- name: Ensure Authorized Keys (in case of update)
  ansible.builtin.blockinfile:
    path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
    block: "{{ ansible_user_pubkeys }}"
    owner: "{{ ansible_user }}"
    mode: 0600
    create: yes
    marker: "<!-- {mark} ANSIBLE MANAGED SSH ansible_user_pubkeys -->"
  when: ansible_user_pubkeys is defined
  notify: Restart sshd

- name: "Set User Password for {{ ansible_user }}"
  when: ansible_user_password is defined
  become: true
  ansible.builtin.user:
    name: "{{ username }}"
    password: "{{ ansible_user_password | password_hash('sha512', ansible_user_password_salt) }}"

- name: "Remove Default user {{ initial_user }}"
  become: yes
  ansible.builtin.user:
    name: "{{ initial_user }}"
    state: absent
    remove: yes
    force: true
  when: initial_user not in  ["root","vagrant","localadmin"] and remove_initial_user
